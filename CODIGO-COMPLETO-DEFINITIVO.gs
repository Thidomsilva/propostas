// =============================================
// C√ìDIGO GOOGLE APPS SCRIPT - VERS√ÉO FINAL DEFINITIVA
// =============================================
// VERS√ÉO 4.4-DEFINITIVA - Resolve TODOS os problemas
// Problema cr√≠tico resolvido: Mapeamento correto das colunas + Corre√ß√£o autom√°tica

// === CONFIGURA√á√ïES ===
var SAGACY_CONFIG = {
  SPREADSHEET_ID: '12TDtLrXg4NM6H4kc6_x8gjsQCdKl76fkuqFCRc4-QRo',
  SHEET_NAME: 'propostasacompanhamento',
  EMAIL_NOTIFICATIONS: true,
  NOTIFICATION_EMAIL: 'thiago@sagacy.com.br',
  SENDER_EMAIL: 'agenty@sagacy.com.br',
  DEBUG: true
};

// === ESTRUTURA DA PLANILHA ===
// A=Data | B=Cliente | C=Servi√ßo | D=Solicitante | E=Descri√ß√£o | F=Prazo | G=Status | H=Observa√ß√µes | I=Data Atualiza√ß√£o

// === FUN√á√ïES PRINCIPAIS PARA CORS ===
function doGet(e) {
  return handleCorsRequest(e);
}

function doPost(e) {
  return handleCorsRequest(e);
}

function doOptions(e) {
  return handleCorsRequest(e);
}

function handleCorsRequest(e) {
  var resposta;
  
  try {
    var resultado = processarRequisicao(e);
    resposta = ContentService
      .createTextOutput(JSON.stringify(resultado))
      .setMimeType(ContentService.MimeType.JSON);
    
  } catch (error) {
    console.error('Erro CORS:', error);
    var erro = {
      sucesso: false,
      erro: error.toString(),
      timestamp: new Date().toISOString()
    };
    
    resposta = ContentService
      .createTextOutput(JSON.stringify(erro))
      .setMimeType(ContentService.MimeType.JSON);
  }
  
  return criarRespostaCors(resposta);
}

function criarRespostaCors(resposta) {
  var output = resposta.getContent();
  var callback = 'corsCallback';
  var outputFinal = callback + '(' + output + ');';
  
  return ContentService
    .createTextOutput(outputFinal)
    .setMimeType(ContentService.MimeType.JAVASCRIPT);
}

function processarRequisicao(e) {
  console.log('=== NOVA REQUISI√á√ÉO ===');
  console.log('Timestamp:', new Date().toISOString());
  
  var action = 'listar';
  var dados = {};
  
  if (e && e.parameter) {
    action = e.parameter.action || 'listar';
    dados = e.parameter;
    console.log('Par√¢metros GET:', JSON.stringify(dados));
  }
  
  if (e && e.postData && e.postData.contents) {
    try {
      var postData = JSON.parse(e.postData.contents);
      action = postData.action || action;
      dados = Object.assign(dados, postData);
      console.log('Dados POST:', JSON.stringify(postData));
    } catch (error) {
      console.log('Erro ao processar POST:', error);
    }
  }
  
  console.log('A√ß√£o solicitada:', action);
  
  switch (action) {
    case 'listar':
      return listarSolicitacoes();
    case 'criar':
      return criarSolicitacao(dados);
    case 'atualizar':
      return atualizarSolicitacao(dados);
    case 'deletar':
      return deletarSolicitacao(dados.id);
    case 'teste_email':
      return testarEnvioEmail();
    case 'validar_estrutura':
      return validarEstruturaPlanilha();
    case 'corrigir_dados':
      return corrigirDadosIncorretos();
    case 'correcao_urgente':
      return EXECUTAR_CORRECAO_URGENTE();
    case 'teste_pos_correcao':
      return TESTAR_APOS_CORRECAO();
    case 'criar_teste_limpo':
      return CRIAR_TESTE_LIMPO();
    default:
      return criarResposta(false, 'A√ß√£o n√£o reconhecida: ' + action);
  }
}

// === FUN√á√ÉO DE LISTAR - COM CORRE√á√ÉO AUTOM√ÅTICA ===
function listarSolicitacoes() {
  try {
    console.log('üìä Listando solicita√ß√µes...');
    
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      console.log('‚ö†Ô∏è Aba n√£o encontrada, criando nova...');
      aba = planilha.insertSheet(SAGACY_CONFIG.SHEET_NAME);
      
      // ESTRUTURA CORRETA: Data | Cliente | Servi√ßo | Solicitante | Descri√ß√£o | Prazo | Status | Observa√ß√µes | Data Atualiza√ß√£o
      var cabecalho = ['Data', 'Cliente', 'Servi√ßo', 'Solicitante', 'Descri√ß√£o', 'Prazo', 'Status', 'Observa√ß√µes', 'Data Atualiza√ß√£o'];
      aba.getRange(1, 1, 1, cabecalho.length).setValues([cabecalho]);
      
      console.log('‚úÖ Aba criada com estrutura correta');
      return criarResposta(true, 'Planilha inicializada com sucesso', []);
    }
    
    // CORRE√á√ÉO AUTOM√ÅTICA ANTES DE LISTAR
    corrigirDadosAutomaticamente(aba);
    
    var dados = aba.getDataRange().getValues();
    var solicitacoes = [];
    
    console.log('üìä Total de linhas encontradas:', dados.length);
    console.log('üìã Cabe√ßalhos:', dados[0].join(' | '));
    
    // Processar dados (pular cabe√ßalho)
    for (var i = 1; i < dados.length; i++) {
      var linha = dados[i];
      if (linha[0] && linha[0] !== '') {
        
        // MAPEAMENTO CORRIGIDO DAS COLUNAS:
        // A=0: Data, B=1: Cliente, C=2: Servi√ßo, D=3: Solicitante, E=4: Descri√ß√£o, F=5: Prazo, G=6: Status, H=7: Observa√ß√µes, I=8: Data Atualiza√ß√£o
        var solicitacao = {
          id: i,
          data: formatarData(linha[0]),      // A: Data
          cliente: linha[1] || '',           // B: Cliente  
          servico: linha[2] || '',           // C: Servi√ßo
          solicitante: linha[3] || '',       // D: Solicitante
          descricao: linha[4] || '',         // E: Descri√ß√£o
          prazo: formatarData(linha[5]) || '', // F: Prazo ‚¨ÖÔ∏è POSI√á√ÉO CORRETA!
          status: linha[6] || 'Pendente',    // G: Status ‚¨ÖÔ∏è POSI√á√ÉO CORRETA!
          observacoes: linha[7] || '',       // H: Observa√ß√µes
          data_atualizacao: formatarData(linha[8]) || formatarData(linha[0]) // I: Data Atualiza√ß√£o
        };
        
        // LOG PARA DEBUG
        console.log('üîç Item processado:', {
          id: solicitacao.id,
          cliente: solicitacao.cliente,
          prazo: solicitacao.prazo,
          status: solicitacao.status
        });
        
        solicitacoes.push(solicitacao);
      }
    }
    
    console.log('‚úÖ Processadas', solicitacoes.length, 'solicita√ß√µes v√°lidas');
    return criarResposta(true, 'Dados carregados com sucesso', solicitacoes);
    
  } catch (error) {
    console.error('‚ùå Erro ao listar solicita√ß√µes:', error);
    return criarResposta(false, 'Erro ao carregar dados: ' + error.message);
  }
}

// === FUN√á√ÉO DE CORRE√á√ÉO AUTOM√ÅTICA ===
function corrigirDadosAutomaticamente(aba) {
  try {
    console.log('üîß Verificando e corrigindo dados automaticamente...');
    
    var dados = aba.getDataRange().getValues();
    var correcoes = 0;
    
    // Verificar e corrigir dados incorretos
    for (var i = 1; i < dados.length; i++) {
      var linha = dados[i];
      
      // Se a coluna F (prazo) cont√©m status em vez de data
      if (linha[5] === 'Pendente' || linha[5] === 'Em Andamento' || linha[5] === 'Conclu√≠do' || linha[5] === 'Cancelado') {
        console.log('üîß Corrigindo linha ' + (i + 1) + ': Status na coluna prazo');
        
        // Mover status da coluna F para G
        aba.getRange(i + 1, 7).setValue(linha[5]); // G = Status
        aba.getRange(i + 1, 6).setValue(''); // F = Prazo (limpar)
        
        correcoes++;
      }
    }
    
    if (correcoes > 0) {
      console.log('‚úÖ Corre√ß√£o autom√°tica: ' + correcoes + ' linhas corrigidas');
    }
    
  } catch (error) {
    console.log('‚ö†Ô∏è Erro na corre√ß√£o autom√°tica:', error);
  }
}

// === FUN√á√ÉO DE CRIAR - TOTALMENTE CORRIGIDA ===
function criarSolicitacao(dados) {
  try {
    console.log('üìù Criando solicita√ß√£o...');
    console.log('Dados recebidos:', JSON.stringify(dados));
    
    // Validar dados obrigat√≥rios
    var camposObrigatorios = ['cliente', 'servico', 'solicitante', 'descricao'];
    var camposFaltando = [];
    
    camposObrigatorios.forEach(function(campo) {
      if (!dados[campo] || dados[campo].trim() === '') {
        camposFaltando.push(campo);
      }
    });
    
    if (camposFaltando.length > 0) {
      return criarResposta(false, 'Campos obrigat√≥rios faltando: ' + camposFaltando.join(', '));
    }
    
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      return criarResposta(false, 'Planilha n√£o encontrada. Execute a inicializa√ß√£o primeiro.');
    }
    
    var dataAtual = new Date().toLocaleDateString('pt-BR');
    var horaAtual = new Date().toLocaleTimeString('pt-BR');
    
    console.log('‚è∞ CAMPO PRAZO recebido:', dados.prazo);
    console.log('üìù Validando estrutura da planilha...');
    
    // Verificar estrutura da planilha
    var headers = aba.getRange(1, 1, 1, aba.getLastColumn()).getValues()[0];
    console.log('üìã Cabe√ßalhos atuais:', headers.join(' | '));
    
    // ESTRUTURA CORRETA: Data | Cliente | Servi√ßo | Solicitante | Descri√ß√£o | Prazo | Status | Observa√ß√µes | Data Atualiza√ß√£o
    var novaLinha = [
      dataAtual,                                    // A: Data (posi√ß√£o 0)
      dados.cliente.trim(),                         // B: Cliente (posi√ß√£o 1)
      dados.servico.trim(),                         // C: Servi√ßo (posi√ß√£o 2)
      dados.solicitante.trim(),                     // D: Solicitante (posi√ß√£o 3)
      dados.descricao.trim(),                       // E: Descri√ß√£o (posi√ß√£o 4)
      dados.prazo || '',                            // F: Prazo (posi√ß√£o 5) ‚¨ÖÔ∏è CORRETO!
      'Pendente',                                   // G: Status (posi√ß√£o 6) ‚¨ÖÔ∏è CORRETO!
      dados.observacoes ? dados.observacoes.trim() : '', // H: Observa√ß√µes (posi√ß√£o 7)
      dataAtual + ' ' + horaAtual                   // I: Data Atualiza√ß√£o (posi√ß√£o 8)
    ];
    
    console.log('üìù LINHA CORRIGIDA a ser inserida:');
    console.log('A-Data:', novaLinha[0]);
    console.log('B-Cliente:', novaLinha[1]);
    console.log('C-Servi√ßo:', novaLinha[2]);
    console.log('D-Solicitante:', novaLinha[3]);
    console.log('E-Descri√ß√£o:', novaLinha[4]);
    console.log('F-Prazo:', novaLinha[5], '‚¨ÖÔ∏è CAMPO PRAZO CORRETO');
    console.log('G-Status:', novaLinha[6], '‚¨ÖÔ∏è STATUS CORRETO');
    console.log('H-Observa√ß√µes:', novaLinha[7]);
    console.log('I-Data Atualiza√ß√£o:', novaLinha[8]);
    
    aba.appendRow(novaLinha);
    console.log('‚úÖ Solicita√ß√£o salva na planilha COM ESTRUTURA TOTALMENTE CORRIGIDA');
    
    var solicitacaoSalva = {
      data: dataAtual,
      cliente: dados.cliente.trim(),
      servico: dados.servico.trim(),
      solicitante: dados.solicitante.trim(),
      descricao: dados.descricao.trim(),
      prazo: dados.prazo || '',
      status: 'Pendente',
      observacoes: dados.observacoes ? dados.observacoes.trim() : '',
      data_atualizacao: dataAtual + ' ' + horaAtual
    };
    
    console.log('‚úÖ Solicita√ß√£o criada COM PRAZO FUNCIONANDO:', solicitacaoSalva.prazo);
    
    // Enviar e-mail
    var emailResult = { sucesso: false, motivo: 'Email desabilitado' };
    
    if (SAGACY_CONFIG.EMAIL_NOTIFICATIONS) {
      try {
        console.log('üìß Enviando notifica√ß√£o por e-mail...');
        emailResult = enviarNotificacao('Nova solicita√ß√£o criada', solicitacaoSalva);
        console.log('üìß Resultado do e-mail:', JSON.stringify(emailResult));
      } catch (emailError) {
        console.error('‚ùå Erro no envio do e-mail:', emailError);
        emailResult = { 
          sucesso: false, 
          erro: emailError.toString(),
          timestamp: new Date().toISOString()
        };
      }
    }
    
    console.log('‚úÖ Solicita√ß√£o criada com sucesso TOTAL');
    
    return criarResposta(true, 'Solicita√ß√£o criada com sucesso', {
      solicitacao: solicitacaoSalva,
      email: emailResult
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao criar solicita√ß√£o:', error);
    return criarResposta(false, 'Erro ao criar solicita√ß√£o: ' + error.message);
  }
}

// === FUN√á√ÉO DE ATUALIZAR - CORRIGIDA ===
function atualizarSolicitacao(dados) {
  try {
    console.log('üìù Atualizando solicita√ß√£o:', JSON.stringify(dados));
    
    if (!dados.id || !dados.status) {
      return criarResposta(false, 'ID e status s√£o obrigat√≥rios para atualiza√ß√£o');
    }
    
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      return criarResposta(false, 'Planilha n√£o encontrada');
    }
    
    var linha = parseInt(dados.id) + 1;
    
    if (linha > aba.getLastRow()) {
      return criarResposta(false, 'Solicita√ß√£o n√£o encontrada');
    }
    
    // ATUALIZAR POSI√á√ïES CORRETAS:
    // G=7: Status, H=8: Observa√ß√µes, I=9: Data Atualiza√ß√£o
    aba.getRange(linha, 7).setValue(dados.status);  // G: Status (coluna 7)
    aba.getRange(linha, 8).setValue(dados.observacoes || ''); // H: Observa√ß√µes (coluna 8)
    aba.getRange(linha, 9).setValue(new Date().toLocaleDateString('pt-BR') + ' ' + new Date().toLocaleTimeString('pt-BR')); // I: Data Atualiza√ß√£o (coluna 9)
    
    console.log('‚úÖ Solicita√ß√£o atualizada com posi√ß√µes corretas');
    return criarResposta(true, 'Solicita√ß√£o atualizada com sucesso');
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar solicita√ß√£o:', error);
    return criarResposta(false, 'Erro ao atualizar: ' + error.message);
  }
}

// === FUN√á√ÉO DE DELETAR ===
function deletarSolicitacao(id) {
  try {
    console.log('üóëÔ∏è Deletando solicita√ß√£o:', id);
    
    if (!id) {
      return criarResposta(false, 'ID √© obrigat√≥rio para exclus√£o');
    }
    
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      return criarResposta(false, 'Planilha n√£o encontrada');
    }
    
    var linha = parseInt(id) + 1;
    
    if (linha > aba.getLastRow()) {
      return criarResposta(false, 'Solicita√ß√£o n√£o encontrada');
    }
    
    aba.deleteRow(linha);
    console.log('‚úÖ Solicita√ß√£o deletada');
    return criarResposta(true, 'Solicita√ß√£o removida com sucesso');
    
  } catch (error) {
    console.error('‚ùå Erro ao deletar solicita√ß√£o:', error);
    return criarResposta(false, 'Erro ao deletar: ' + error.message);
  }
}

// === FUN√á√ÉO DE E-MAIL - INCLUINDO PRAZO ===
function enviarNotificacao(assunto, dados) {
  try {
    console.log('üìß Preparando notifica√ß√£o por e-mail...');
    
    if (!SAGACY_CONFIG.EMAIL_NOTIFICATIONS) {
      return { sucesso: false, motivo: 'Notifica√ß√µes desabilitadas' };
    }
    
    if (!SAGACY_CONFIG.NOTIFICATION_EMAIL || !SAGACY_CONFIG.NOTIFICATION_EMAIL.includes('@')) {
      return { sucesso: false, motivo: 'E-mail de destino inv√°lido' };
    }
    
    var corpo = 'üìß Nova solicita√ß√£o recebida:\n\n';
    corpo += 'üè¢ Cliente: ' + dados.cliente + '\n';
    corpo += 'üõ†Ô∏è Servi√ßo: ' + dados.servico + '\n';
    corpo += 'üë§ Solicitante: ' + dados.solicitante + '\n';
    corpo += 'üìù Descri√ß√£o: ' + dados.descricao + '\n';
    corpo += 'üìÖ Data: ' + new Date().toLocaleDateString('pt-BR') + ' √†s ' + new Date().toLocaleTimeString('pt-BR') + '\n';
    
    if (dados.prazo) {
      corpo += '‚è∞ Prazo: ' + dados.prazo + '\n';
    }
    
    corpo += 'üîÑ Status: ' + (dados.status || 'Pendente') + '\n';
    
    if (dados.observacoes) {
      corpo += 'üìã Observa√ß√µes: ' + dados.observacoes + '\n';
    }
    
    corpo += '\nüîó Acesse a plataforma para mais detalhes.';
    corpo += '\n\n---\nüì± Sistema Sagacy de Propostas';
    corpo += '\n‚è∞ Enviado em: ' + new Date().toLocaleString('pt-BR');
    
    var assuntoCompleto = '[Sagacy] ' + assunto;
    
    try {
      GmailApp.sendEmail(SAGACY_CONFIG.NOTIFICATION_EMAIL, assuntoCompleto, corpo);
      console.log('‚úÖ E-mail enviado com sucesso via GmailApp!');
      
      return {
        sucesso: true,
        metodo: 'GmailApp',
        destinatario: SAGACY_CONFIG.NOTIFICATION_EMAIL,
        assunto: assuntoCompleto,
        timestamp: new Date().toISOString()
      };
      
    } catch (gmailError) {
      try {
        MailApp.sendEmail(SAGACY_CONFIG.NOTIFICATION_EMAIL, assuntoCompleto, corpo);
        console.log('‚úÖ E-mail enviado com sucesso via MailApp!');
        
        return {
          sucesso: true,
          metodo: 'MailApp',
          destinatario: SAGACY_CONFIG.NOTIFICATION_EMAIL,
          assunto: assuntoCompleto,
          timestamp: new Date().toISOString()
        };
        
      } catch (mailError) {
        throw new Error('Falha em ambos os m√©todos: ' + gmailError.toString() + ' | ' + mailError.toString());
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico no envio de e-mail:', error);
    return {
      sucesso: false,
      erro: error.toString(),
      timestamp: new Date().toISOString()
    };
  }
}

// === FUN√á√ÉO DE TESTE DE E-MAIL ===
function testarEnvioEmail() {
  try {
    console.log('üß™ Iniciando teste de e-mail...');
    
    var dadosTeste = {
      cliente: 'Cliente Teste',
      servico: 'Teste de Sistema',
      solicitante: 'Sistema Automatizado',
      descricao: 'Este √© um teste do sistema de e-mail do Sagacy. Enviado em: ' + new Date().toLocaleString('pt-BR'),
      prazo: '31/07/2025',
      status: 'Teste'
    };
    
    var resultado = enviarNotificacao('Teste de E-mail', dadosTeste);
    
    return criarResposta(true, 'Teste de e-mail executado', {
      dados: dadosTeste,
      resultado: resultado
    });
    
  } catch (error) {
    console.error('‚ùå Erro no teste de e-mail:', error);
    return criarResposta(false, 'Erro no teste: ' + error.message);
  }
}

// === FUN√á√ïES AUXILIARES ===
function formatarData(valor) {
  if (!valor) return '';
  
  try {
    if (valor instanceof Date) {
      return valor.toLocaleDateString('pt-BR');
    }
    
    if (typeof valor === 'string') {
      // Se j√° est√° no formato DD/MM/AAAA, retornar como est√°
      if (valor.match(/^\d{2}\/\d{2}\/\d{4}$/)) {
        return valor;
      }
      
      // Tentar converter outras varia√ß√µes
      var data = new Date(valor);
      if (!isNaN(data.getTime())) {
        return data.toLocaleDateString('pt-BR');
      }
    }
    
    return valor.toString();
  } catch (error) {
    console.log('Erro ao formatar data:', valor, error);
    return valor.toString();
  }
}

function criarResposta(sucesso, mensagem, dados) {
  var resposta = {
    sucesso: sucesso,
    mensagem: mensagem,
    timestamp: new Date().toISOString(),
    versao: '4.4-DEFINITIVA'  // VERS√ÉO FINAL DEFINITIVA
  };
  
  if (dados) {
    resposta.dados = dados;
  }
  
  console.log('üì§ Resposta:', JSON.stringify(resposta));
  return resposta;
}

// === FUN√á√ÉO DE VALIDA√á√ÉO DA ESTRUTURA ===
function validarEstruturaPlanilha() {
  try {
    console.log('üîç Validando estrutura da planilha...');
    
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      return criarResposta(false, 'Planilha n√£o encontrada');
    }
    
    var headers = aba.getRange(1, 1, 1, aba.getLastColumn()).getValues()[0];
    var estruturaCorreta = ['Data', 'Cliente', 'Servi√ßo', 'Solicitante', 'Descri√ß√£o', 'Prazo', 'Status', 'Observa√ß√µes', 'Data Atualiza√ß√£o'];
    
    var validacao = {
      headers_atuais: headers,
      estrutura_correta: estruturaCorreta,
      esta_correto: JSON.stringify(headers) === JSON.stringify(estruturaCorreta),
      total_colunas: headers.length,
      problemas: []
    };
    
    if (!validacao.esta_correto) {
      for (var i = 0; i < estruturaCorreta.length; i++) {
        if (headers[i] !== estruturaCorreta[i]) {
          validacao.problemas.push('Posi√ß√£o ' + (i + 1) + ': Esperado "' + estruturaCorreta[i] + '", encontrado "' + (headers[i] || 'VAZIO') + '"');
        }
      }
    }
    
    console.log('üìä Valida√ß√£o:', JSON.stringify(validacao));
    return criarResposta(true, 'Valida√ß√£o da estrutura executada', validacao);
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o:', error);
    return criarResposta(false, 'Erro na valida√ß√£o: ' + error.message);
  }
}

// === FUN√á√ÉO PARA CORRIGIR DADOS INCORRETOS ===
function corrigirDadosIncorretos() {
  try {
    console.log('üîß Iniciando corre√ß√£o de dados incorretos...');
    
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      return criarResposta(false, 'Planilha n√£o encontrada');
    }
    
    var dados = aba.getDataRange().getValues();
    var correcoes = [];
    
    // Verificar e corrigir dados incorretos
    for (var i = 1; i < dados.length; i++) {
      var linha = dados[i];
      var precisaCorrecao = false;
      
      // Verificar se h√° "Pendente" na coluna F (prazo) em vez de G (status)
      if (linha[5] === 'Pendente' || linha[5] === 'Em Andamento' || linha[5] === 'Conclu√≠do') {
        console.log('üîß Linha ' + (i + 1) + ': Status encontrado na coluna de prazo');
        
        // Mover status da coluna F para G
        aba.getRange(i + 1, 7).setValue(linha[5]); // Colocar status na posi√ß√£o correta (G)
        aba.getRange(i + 1, 6).setValue(''); // Limpar prazo incorreto (F)
        
        correcoes.push({
          linha: i + 1,
          problema: 'Status na coluna de prazo',
          acao: 'Movido "' + linha[5] + '" de prazo para status'
        });
        
        precisaCorrecao = true;
      }
      
      if (precisaCorrecao) {
        // Atualizar data de atualiza√ß√£o
        aba.getRange(i + 1, 9).setValue(new Date().toLocaleDateString('pt-BR') + ' ' + new Date().toLocaleTimeString('pt-BR'));
      }
    }
    
    console.log('‚úÖ Corre√ß√µes aplicadas:', correcoes.length);
    return criarResposta(true, 'Corre√ß√£o de dados executada', {
      correcoes_aplicadas: correcoes.length,
      detalhes: correcoes
    });
    
  } catch (error) {
    console.error('‚ùå Erro na corre√ß√£o:', error);
    return criarResposta(false, 'Erro na corre√ß√£o: ' + error.message);
  }
}

// === FUN√á√ÉO DE INICIALIZA√á√ÉO - VERS√ÉO FINAL ===
function inicializarSistema() {
  try {
    console.log('üöÄ Inicializando sistema Sagacy VERS√ÉO FINAL...');
    
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      console.log('üìã Criando nova planilha...');
      aba = planilha.insertSheet(SAGACY_CONFIG.SHEET_NAME);
      
      // ESTRUTURA FINAL CORRETA
      var cabecalho = ['Data', 'Cliente', 'Servi√ßo', 'Solicitante', 'Descri√ß√£o', 'Prazo', 'Status', 'Observa√ß√µes', 'Data Atualiza√ß√£o'];
      aba.getRange(1, 1, 1, cabecalho.length).setValues([cabecalho]);
      
      console.log('‚úÖ Planilha criada com estrutura FINAL CORRETA');
    } else {
      console.log('‚úÖ Planilha existente encontrada, validando estrutura...');
      
      var headers = aba.getRange(1, 1, 1, aba.getLastColumn()).getValues()[0];
      var estruturaCorreta = ['Data', 'Cliente', 'Servi√ßo', 'Solicitante', 'Descri√ß√£o', 'Prazo', 'Status', 'Observa√ß√µes', 'Data Atualiza√ß√£o'];
      
      if (JSON.stringify(headers) !== JSON.stringify(estruturaCorreta)) {
        console.log('‚ö†Ô∏è Estrutura incorreta detectada, corrigindo...');
        aba.getRange(1, 1, 1, estruturaCorreta.length).setValues([estruturaCorreta]);
        console.log('‚úÖ Cabe√ßalhos corrigidos');
      }
    }
    
    console.log('üéâ Sistema inicializado com sucesso - VERS√ÉO FINAL DEFINITIVA!');
    return 'Sistema Sagacy inicializado com sucesso em ' + new Date().toLocaleString('pt-BR') + ' - VERS√ÉO 4.4-DEFINITIVA';
    
  } catch (error) {
    console.error('‚ùå Erro na inicializa√ß√£o:', error);
    return 'Erro na inicializa√ß√£o: ' + error.message;
  }
}

// === FUN√á√ÉO DE DEBUG AVAN√áADO ===
function debugSistemaCompleto() {
  try {
    console.log('üêõ Iniciando debug completo do sistema...');
    
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      return criarResposta(false, 'Planilha n√£o encontrada para debug');
    }
    
    var dados = aba.getDataRange().getValues();
    var headers = dados[0];
    
    var debug = {
      timestamp: new Date().toISOString(),
      versao: '4.4-DEFINITIVA',
      planilha: {
        total_linhas: dados.length,
        total_colunas: headers.length,
        headers: headers
      },
      dados_exemplo: [],
      problemas_detectados: []
    };
    
    // Analisar primeiras 3 linhas de dados
    for (var i = 1; i <= Math.min(3, dados.length - 1); i++) {
      var linha = dados[i];
      debug.dados_exemplo.push({
        linha: i + 1,
        data: linha[0],
        cliente: linha[1],
        servico: linha[2],
        solicitante: linha[3],
        descricao: linha[4],
        prazo: linha[5],
        status: linha[6],
        observacoes: linha[7],
        data_atualizacao: linha[8]
      });
      
      // Detectar problemas
      if (linha[5] === 'Pendente' || linha[5] === 'Em Andamento' || linha[5] === 'Conclu√≠do') {
        debug.problemas_detectados.push('Linha ' + (i + 1) + ': Status na coluna de prazo');
      }
    }
    
    return criarResposta(true, 'Debug completo executado', debug);
    
  } catch (error) {
    console.error('‚ùå Erro no debug:', error);
    return criarResposta(false, 'Erro no debug: ' + error.message);
  }
}

// =============================================
// FUN√á√ïES DE CORRE√á√ÉO URGENTE INTEGRADAS
// =============================================

function EXECUTAR_CORRECAO_URGENTE() {
  console.log('üö® INICIANDO CORRE√á√ÉO URGENTE DO SISTEMA...');
  
  try {
    var planilha = SpreadsheetApp.openById(SAGACY_CONFIG.SPREADSHEET_ID);
    var aba = planilha.getSheetByName(SAGACY_CONFIG.SHEET_NAME);
    
    if (!aba) {
      console.log('‚ùå Planilha n√£o encontrada!');
      return criarResposta(false, 'ERRO: Planilha n√£o encontrada');
    }
    
    // 1. CORRIGIR CABE√áALHOS
    console.log('üìã Corrigindo cabe√ßalhos...');
    var cabe√ßalhoCorreto = ['Data', 'Cliente', 'Servi√ßo', 'Solicitante', 'Descri√ß√£o', 'Prazo', 'Status', 'Observa√ß√µes', 'Data Atualiza√ß√£o'];
    aba.getRange(1, 1, 1, cabe√ßalhoCorreto.length).setValues([cabe√ßalhoCorreto]);
    console.log('‚úÖ Cabe√ßalhos corrigidos');
    
    // 2. CORRIGIR DADOS INCORRETOS
    console.log('üîß Corrigindo dados incorretos...');
    var dados = aba.getDataRange().getValues();
    var correcoes = 0;
    
    for (var i = 1; i < dados.length; i++) {
      var linha = dados[i];
      
      // Se a coluna F (prazo) cont√©m status em vez de data
      if (linha[5] === 'Pendente' || linha[5] === 'Em Andamento' || linha[5] === 'Conclu√≠do' || linha[5] === 'Cancelado') {
        console.log('üîß Linha ' + (i + 1) + ': Corrigindo status na coluna prazo');
        
        // Mover status para a posi√ß√£o correta (coluna G)
        aba.getRange(i + 1, 7).setValue(linha[5]); // G = Status
        aba.getRange(i + 1, 6).setValue(''); // F = Prazo (limpar)
        
        correcoes++;
      }
    }
    
    console.log('‚úÖ Corre√ß√µes aplicadas: ' + correcoes);
    
    // 3. VERIFICAR RESULTADO
    console.log('üîç Verificando resultado...');
    var dadosCorrigidos = aba.getDataRange().getValues();
    
    console.log('üìä RESULTADO DA CORRE√á√ÉO:');
    for (var j = 1; j <= Math.min(3, dadosCorrigidos.length - 1); j++) {
      var linhaCorrigida = dadosCorrigidos[j];
      console.log('Linha ' + (j + 1) + ':');
      console.log('  F-Prazo: "' + linhaCorrigida[5] + '"');
      console.log('  G-Status: "' + linhaCorrigida[6] + '"');
    }
    
    var resultado = {
      correcoes_aplicadas: correcoes,
      mensagem: 'Corre√ß√£o urgente conclu√≠da com sucesso',
      proximos_passos: [
        'Execute listarSolicitacoes() para verificar',
        'Crie nova solicita√ß√£o para testar',
        'Verifique no frontend'
      ]
    };
    
    console.log('üéâ CORRE√á√ÉO URGENTE CONCLU√çDA!');
    return criarResposta(true, 'Corre√ß√£o urgente executada com sucesso', resultado);
    
  } catch (error) {
    console.error('‚ùå ERRO NA CORRE√á√ÉO URGENTE:', error);
    return criarResposta(false, 'ERRO: ' + error.message);
  }
}

function TESTAR_APOS_CORRECAO() {
  console.log('üß™ Testando sistema ap√≥s corre√ß√£o...');
  
  try {
    var resultado = listarSolicitacoes();
    
    if (resultado.sucesso && resultado.dados && resultado.dados.length > 0) {
      var primeiroItem = resultado.dados[0];
      
      console.log('üìä TESTE DO PRIMEIRO ITEM:');
      console.log('Prazo: "' + primeiroItem.prazo + '"');
      console.log('Status: "' + primeiroItem.status + '"');
      
      var teste = {
        item_testado: primeiroItem,
        prazo_correto: primeiroItem.prazo !== 'Pendente',
        status_correto: primeiroItem.status === 'Pendente',
        resultado: primeiroItem.prazo !== 'Pendente' ? 'SUCESSO' : 'FALHA'
      };
      
      return criarResposta(true, 'Teste p√≥s-corre√ß√£o executado', teste);
      
    } else {
      return criarResposta(false, 'Nenhum dado encontrado para testar');
    }
    
  } catch (error) {
    return criarResposta(false, 'Erro no teste: ' + error.message);
  }
}

function CRIAR_TESTE_LIMPO() {
  console.log('üß™ Criando teste com dados limpos...');
  
  var dadosTeste = {
    cliente: 'Cliente Teste Final',
    servico: 'Teste de Sistema',
    solicitante: 'Thiago',
    descricao: 'Teste ap√≥s corre√ß√£o definitiva do sistema',
    prazo: '15/07/2025' // DATA REAL, N√ÉO STATUS!
  };
  
  try {
    var resultado = criarSolicitacao(dadosTeste);
    
    if (resultado.sucesso) {
      console.log('‚úÖ Solicita√ß√£o de teste criada com sucesso');
      console.log('Prazo salvo: "' + resultado.dados.solicitacao.prazo + '"');
      
      var teste = {
        dados_enviados: dadosTeste,
        dados_salvos: resultado.dados.solicitacao,
        prazo_funcionando: resultado.dados.solicitacao.prazo === dadosTeste.prazo,
        status_correto: resultado.dados.solicitacao.status === 'Pendente'
      };
      
      return criarResposta(true, 'Teste limpo criado com sucesso', teste);
    } else {
      return criarResposta(false, 'Erro ao criar teste: ' + resultado.mensagem);
    }
    
  } catch (error) {
    return criarResposta(false, 'Erro no teste: ' + error.message);
  }
}
